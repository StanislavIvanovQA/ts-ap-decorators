"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
const core_1 = require("../core");
const descriptor_1 = require("../core/descriptor");
const nodeSymbol = (key) => `__testdeck_${key}`;
const testNameSymbol = nodeSymbol("name");
const parametersSymbol = nodeSymbol("parametersSymbol");
const nameForParametersSymbol = nodeSymbol("nameForParameters");
const makeParamsNameFunction = () => {
    return (nameForParameters) => (target, propertyKey, descriptor) => {
        target[propertyKey][nameForParametersSymbol] = nameForParameters;
        return descriptor;
    };
};
const makeParamsFunction = (execution) => {
    return (params, name) => (target, propertyKey, descriptor) => {
        const adjustedParams = typeof params === "function" ? params() : params;
        target[propertyKey][testNameSymbol] = propertyKey.toString();
        target[propertyKey][parametersSymbol] = target[propertyKey][parametersSymbol] || [];
        [].concat(adjustedParams || []).forEach((param) => {
            target[propertyKey][parametersSymbol].push({ execution, name, params: param });
        });
        return descriptor_1.processDescriptor((args) => JSON.stringify(args), (arg) => core_1.getAllure().parameter("inputs", arg), descriptor, (prop) => prop.startsWith("__testdeck_"));
    };
};
const makeParamsObject = () => {
    return Object.assign(makeParamsFunction(), {
        only: makeParamsFunction("only"),
        pending: makeParamsFunction("pending"),
        skip: makeParamsFunction("skip"),
        naming: makeParamsNameFunction(),
    });
};
exports.data = makeParamsObject();
//# sourceMappingURL=index.js.map