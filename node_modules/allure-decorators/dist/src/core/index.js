"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assignPmsUrl = exports.assignTmsUrl = exports.getAllure = exports.decorate = exports.description = exports.epic = exports.owner = exports.tag = exports.severity = exports.story = exports.feature = exports.issue = exports.testCaseId = exports.attachment = exports.step = void 0;
const descriptor_1 = require("./descriptor");
const defaultTrackerAddress = "http://localhost";
let allure;
let pmsUrl;
let tmsUrl;
const step = (nameFn) => {
    return (target, propertyKey, descriptor) => {
        const original = descriptor.value;
        let callable;
        if (typeof original === "function") {
            descriptor.value = function (...args) {
                try {
                    const value = typeof nameFn === "function" ? nameFn.apply(this, args) : nameFn;
                    callable = () => exports.getAllure().step(value, () => original.apply(this, args));
                }
                catch (e) {
                    console.error(`[ERROR] Failed to apply step decorator: ${e}`);
                }
                return callable ? callable.apply(this, args) : original.apply(this, args);
            };
        }
        return descriptor;
    };
};
exports.step = step;
const attachment = (name, type) => {
    return (target, propertyKey, descriptor) => {
        const original = descriptor.value;
        let callable;
        if (typeof original === "function") {
            descriptor.value = function (...args) {
                try {
                    const content = original.apply(this, args);
                    callable = () => exports.getAllure().attachment(name, content, type);
                }
                catch (e) {
                    console.error(`[ERROR] Failed to apply attachment decorator: ${e}`);
                }
                return callable ? callable.apply(this, args) : {};
            };
        }
        return descriptor;
    };
};
exports.attachment = attachment;
const testCaseId = (idFn) => {
    return processDecorator(idFn, (id) => exports.getAllure().link(`${getTmsUrl()}/${id}`, id, "tms"));
};
exports.testCaseId = testCaseId;
const issue = (idFn) => {
    return processDecorator(idFn, (id) => exports.getAllure().link(`${getPmsUrl()}/${id}`, id, "issue"));
};
exports.issue = issue;
const feature = (featureFn) => {
    return processDecorator(featureFn, (name) => exports.getAllure().feature(name));
};
exports.feature = feature;
const story = (storyFn) => {
    return processDecorator(storyFn, (name) => exports.getAllure().story(name));
};
exports.story = story;
const severity = (severityFn) => {
    return processDecorator(severityFn, (name) => exports.getAllure().severity(name));
};
exports.severity = severity;
const tag = (tagFn) => {
    return processDecorator(tagFn, (name) => exports.getAllure().tag(name));
};
exports.tag = tag;
const owner = (ownerFn) => {
    return processDecorator(ownerFn, (name) => exports.getAllure().owner(name));
};
exports.owner = owner;
const epic = (epicFn) => {
    return processDecorator(epicFn, (name) => exports.getAllure().epic(name));
};
exports.epic = epic;
const description = (descriptionFn) => {
    return processDecorator(descriptionFn, (text) => exports.getAllure().description(text));
};
exports.description = description;
const decorate = (allureInstance) => {
    allure = allureInstance;
};
exports.decorate = decorate;
const getAllure = () => {
    if (!allure) {
        throw new Error("Unable to find Allure implementation");
    }
    return allure;
};
exports.getAllure = getAllure;
const assignTmsUrl = (url) => {
    tmsUrl = url;
};
exports.assignTmsUrl = assignTmsUrl;
const getTmsUrl = () => {
    return tmsUrl || defaultTrackerAddress;
};
const assignPmsUrl = (url) => {
    pmsUrl = url;
};
exports.assignPmsUrl = assignPmsUrl;
const getPmsUrl = () => {
    return pmsUrl || defaultTrackerAddress;
};
const processDecorator = (parameterFn, reporterFn) => {
    return (target, property, descriptor) => descriptor_1.processDescriptor(parameterFn, reporterFn, descriptor);
};
//# sourceMappingURL=index.js.map